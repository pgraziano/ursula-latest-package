heat_template_version: 2015-10-15

description: A Group of Load Balanced Servers

parameters:

  app_port:
    type: number
    default: 80
    description: Port used by the servers
  flavor:
    type: string
    description: Flavor used for servers
    constraints:
    - custom_constraint: nova.flavor
    default: m1.tiny
  image:
    type: string
    description: Image used for servers
    constraints:
    - custom_constraint: glance.image
    default: cirros
  lb_port:
    type: number
    default: 80
    description: Port used by the load balancer
  private_network:
    type: string
    description: Network used by the servers
    constraints:
    - custom_constraint: neutron.network
    default: internal
  key_name:
    type: string
    description: An ssh keypair name used for accessing the server.
    default: test_keypair
  public_network:
    type: string
    description: Network used by the load balancer
    constraints:
    - custom_constraint: neutron.network
    default: external
  subnet:
    type: string
    description: Subnet on which the load balancer will be located
    constraints:
    - custom_constraint: neutron.subnet
    default: internal_v4

resources:
  ssh_keypair:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: { get_param: key_name }

  sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        port_range_min: { get_param: app_port }
        port_range_max: { get_param: app_port }
      - remote_ip_prefix: 0.0.0.0/0
        protocol: icmp
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        port_range_min: 22
        port_range_max: 22

  server1:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks: [{ network: { get_param: private_network }}]
      security_groups: [{ get_resource: sec_group }]
      user_data_format: RAW
      key_name: { get_resource: ssh_keypair }
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            sudo apt-get update
            sudo apt-get install apache2 -y
            sudo chmod 666 /var/www/html/index.html
            sudo echo "Response from Webserver: " > /var/www/html/index.html
            sudo echo $(ifconfig eth0 | grep 'inet addr' | awk -F: '{ print $2 }' | awk '{ print $1 }') >> /var/www/html/index.html
          params:
            PORT: { get_param: app_port }

  pool_member1:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server1, first_address ]}
      protocol_port: { get_param: app_port }
      subnet: { get_param: subnet }

  server2:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks: [{ network: { get_param: private_network }}]
      security_groups: [{ get_resource: sec_group }]
      user_data_format: RAW
      key_name: { get_resource: ssh_keypair }
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            sudo apt-get update
            sudo apt-get install apache2 -y
            sudo chmod 666 /var/www/html/index.html
            sudo echo "Response from Webserver: " > /var/www/html/index.html
            sudo echo $(ifconfig eth0 | grep 'inet addr' | awk -F: '{ print $2 }' | awk '{ print $1 }') >> /var/www/html/index.html
          params:
            PORT: { get_param: app_port }

  pool_member2:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server2, first_address ]}
      protocol_port: { get_param: app_port }
      subnet: { get_param: subnet }

  monitor:
    type: OS::Neutron::LBaaS::HealthMonitor
    properties:
      delay: 3
      type: PING
      timeout: 3
      max_retries: 3
      pool: { get_resource: pool }

  pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: listener }

  listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: HTTP
      protocol_port: { get_param: lb_port }

  loadbalancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: { get_param: subnet }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_attr: [loadbalancer, vip_port_id ]}

outputs:

#  lburl:
#    description: URL of the loadbalancer
#  value:
##      str_replace:
#        template: http://IP_ADDRESS:PORT
##       params:
#          IP_ADDRESS: { get_attr: [ floating_ip, floating_ip_address ] }
#         PORT: { get_param: lb_port }
#  description: >
#     This URL is the "external" URL that can be used to access the
#      load balancer.


