# {{ ansible_managed }}

[DEFAULT]
# Terminate after detecting deprecated options
fatal_deprecations = {{ neutron.enable_fatal_deprecations }}

# Paths to important items
api_paste_config = /etc/neutron/api-paste.ini

# API
api_workers = {{ neutron.api_workers }}

# Binding
bind_port = {{ endpoints.neutron.port.backend_api }}

# Logging
log_dir = /var/log/neutron
debug = {{ neutron.logging.debug }}
use_stderr = false

dhcp_agents_per_network = 2

advertise_mtu = {{ neutron.advertise_mtu }}

global_physnet_mtu = {{ neutron.global_physnet_mtu }}

max_subnet_host_routes = {{ neutron.max_subnet_host_routes }}

control_exchange = neutron

# Plug-ins
{% if neutron.plugin == 'ml2' %}
core_plugin = neutron.plugins.ml2.plugin.Ml2Plugin
{% endif %}
{% if (neutron.lbaas.enabled == 'smart' and
  groups['controller'][0] not in groups['compute']) or
  neutron.lbaas.enabled|bool %}
service_plugins = {{ neutron.service_plugins|union(neutron.lbaas.service_plugin)|join(',') }}
{% elif neutron.service_plugins|length %}
service_plugins = {{ neutron.service_plugins|join(',') }}
{% endif %}

# Neutron-Nova interaction
notify_nova_on_port_data_changes = True
notify_nova_on_port_status_changes = True
#nova_url = {{ endpoints.nova.url.internal }}/{{ endpoints.nova.version }}

# Overlapping IP address ranges
{% if neutron.allow_overlapping_ips|bool or neutron.l3ha.enabled|bool %}
allow_overlapping_ips = True
{% endif %}

# Layer-3 high-availability (VRRP)
{% if neutron.l3ha.enabled|bool %}
l3_ha = {{ neutron.l3ha.enabled }}
max_l3_agents_per_router = {{ neutron.l3ha.max_agents }}
min_l3_agents_per_router = {{ neutron.l3ha.min_agents }}
l3_ha_net_cidr = {{ neutron.l3ha.cidr }}
ha_vrrp_advert_int = {{ neutron.l3ha.interval }}
ha_vrrp_auth_password = {{ neutron.l3ha.password }}
{% endif %}

[agent]
report_interval = {{ neutron.report_interval }}
{% if openstack_install_method == 'distro' %}
root_helper = "sudo /bin/neutron-rootwrap /etc/neutron/rootwrap.conf"
{% else %}
root_helper = "sudo /usr/local/bin/neutron-rootwrap /etc/neutron/rootwrap.conf"
{% endif %}

[database]
connection = mysql+pymysql://neutron:{{ secrets.db_password }}@{{ endpoints.db }}/neutron?charset=utf8

[keystone_authtoken]
auth_url = {{ endpoints.keystone.url.admin }}
auth_uri = {{ endpoints.keystone.url.internal }}
cafile = {{ neutron.cafile }}
signing_dir = /var/cache/neutron/api
auth_type = password
project_domain_id = default
project_name = service
user_domain_id = default
username = neutron
password = {{ secrets.service_password }}
{% if insecure|default('False')|bool %}
insecure = true
{% endif %}

[nova]
auth_url = {{ endpoints.keystone.url.admin }}
auth_type = password
cafile = {{ neutron.cafile }}
region_name = RegionOne
project_domain_id = default
project_name = service
user_domain_id = default
username = neutron
password = {{ secrets.service_password }}

[oslo_concurrency]
lock_path = $state_path/lock

[oslo_messaging_notifications]
{% if neutron.auditing.enabled|bool and neutron.auditing.logging|bool %}
# Store pyCADF audit events in log #
driver = log
{% else %}
driver = noop
{% endif %}
topics = notifications

[oslo_messaging_rabbit]
{% macro rabbitmq_hosts() -%}
{% for host in groups['controller'] -%}
   {% if loop.last -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ rabbitmq.port }}
   {%- else -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ rabbitmq.port }},
   {%- endif -%}
{% endfor -%}
{% endmacro -%}

heartbeat_timeout_threshold = {{ neutron.heartbeat_timeout_threshold }}
{% if rabbitmq.cluster -%}
rabbit_hosts = {{ rabbitmq_hosts() }}
{% else -%}
rabbit_host = {{ endpoints.rabbit }}
{% endif -%}
rabbit_userid = {{ rabbitmq.user }}
rabbit_password = {{ secrets.rabbit_password }}

[oslo_middleware]
enable_proxy_headers_parsing = True

[cors]
allow_headers = X-Auth-Token,X-Identity-Status,X-Roles,X-Service-Catalog,X-User-Id,X-Tenant-Id,X-OpenStack-Request-ID
expose_headers = X-Auth-Token,X-Subject-Token,X-Service-Token,X-OpenStack-Request-ID
allow_methods = GET,PUT,POST,DELETE,PATCH

[cache]
backend = oslo_cache.memcache_pool
enabled = True
memcache_servers = {{ hostvars|ursula_memcache_hosts(groups, memcached.port) }}
