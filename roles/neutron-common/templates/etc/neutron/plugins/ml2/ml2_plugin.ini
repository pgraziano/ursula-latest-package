# {{ ansible_managed }}

{% if neutron.ml2_customization %}
{{ neutron.ml2_config }}
{% else %}
[ml2]
{% set type_drivers = ['local'] %}
{% if neutron.network_vlan_ranges is defined %}
{% set _ = type_drivers.append('vlan') %}
{% endif %}
{% if neutron.enable_flat_networks %}
{% set _ = type_drivers.append('flat') %}
{% endif %}
{% set type_drivers = type_drivers + neutron.tunnel_types %}
type_drivers = {{ type_drivers|join(',') }}

overlay_ip_version = {{ neutron.overlay_ip_version }}

tenant_network_types = {{ neutron.tenant_network_type }}

{% set mechanism_drivers = ['linuxbridge'] %}
{% if neutron.l2_population %}
{% set _ = mechanism_drivers.append('l2population') %}
{% endif %}
mechanism_drivers = {{ mechanism_drivers|join(',') }}

{% if neutron.extension_drivers|length %}
extension_drivers = {{ neutron.extension_drivers|join(',') }}
{% endif %}

path_mtu = {{ neutron.path_mtu }}

{% if neutron.enable_flat_networks -%}
[ml2_type_flat]
flat_networks = *
{% endif %}

[ml2_type_vlan]
network_vlan_ranges = {{ neutron.network_vlan_ranges }}

[vlan]
network_vlan_ranges = {{ neutron.network_vlan_ranges }}

[ml2_type_gre]
# (ListOpt) Comma-separated list of <tun_min>:<tun_max> tuples enumerating ranges of GRE tunnel IDs that are available for tenant network allocation
tunnel_id_ranges = 1:1000

[ml2_type_vxlan]
vni_ranges = {{ neutron.vxlan.vni_ranges }}
vxlan_group = {{ neutron.vxlan.group_prefix }}

[vxlan]
enable_vxlan = {{ "vxlan" in neutron.tunnel_types }}
l2_population = {{ neutron.l2_population }}
arp_responder = {{ neutron.arp_responder }}

[database]
sql_connection = mysql+pymysql://neutron:{{ secrets.db_password }}@{{ endpoints.db }}/neutron?charset=utf8

[linux_bridge]
physical_interface_mappings = {{ neutron.bridge_mappings }}

[agent]
tunnel_types = {{ neutron.tunnel_types|join(' ,') }}
{% if openstack_install_method == 'distro' %}
root_helper = sudo /bin/neutron-rootwrap /etc/neutron/rootwrap.conf
{% else %}
root_helper = sudo /usr/local/bin/neutron-rootwrap /etc/neutron/rootwrap.conf
{% endif %}

[securitygroup]
enable_security_group = True
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
{% endif %}
