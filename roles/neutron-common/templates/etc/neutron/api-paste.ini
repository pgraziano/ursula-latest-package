# {{ ansible_managed }}

[composite:neutron]
use = egg:Paste#urlmap
/: neutronversions_composite
/v2.0: neutronapi_v2_0

[composite:neutronapi_v2_0]
use = call:neutron.auth:pipeline_factory
noauth = healthcheck cors request_id catch_errors http_proxy_to_wsgi extensions neutronapiapp_v2_0

keystone = healthcheck cors request_id catch_errors http_proxy_to_wsgi authtoken keystonecontext {{ 'audit' if neutron.auditing.enabled|bool else '' }}  {{ 'neutron_rbac' if neutron.jellyroll|bool else '' }} extensions neutronapiapp_v2_0

[composite:neutronversions_composite]
use = call:neutron.auth:pipeline_factory
noauth = healthcheck cors neutronversions
keystone = healthcheck cors neutronversions

{% if neutron.jellyroll|bool %}
[filter:neutron_rbac]
paste.filter_factory = jellyroll.neutron.rbac_filter:NeutronRBACFilter.factory
{% endif %}

[filter:request_id]
paste.filter_factory = oslo_middleware:RequestId.factory

[filter:catch_errors]
paste.filter_factory = oslo_middleware:CatchErrors.factory

[filter:cors]
paste.filter_factory = oslo_middleware.cors:filter_factory
oslo_config_project = neutron

[filter:keystonecontext]
paste.filter_factory = neutron.auth:NeutronKeystoneContext.factory

[filter:authtoken]
paste.filter_factory = keystonemiddleware.auth_token:filter_factory

[filter:audit]
paste.filter_factory = keystonemiddleware.audit:filter_factory
audit_map_file = /etc/neutron/neutron_api_audit_map.conf

[filter:extensions]
paste.filter_factory = neutron.api.extensions:plugin_aware_extension_middleware_factory

[filter:http_proxy_to_wsgi]
paste.filter_factory = oslo_middleware:HTTPProxyToWSGI.factory

[app:neutronversions]
paste.app_factory = neutron.api.versions:Versions.factory

[app:neutronapiapp_v2_0]
paste.app_factory = neutron.api.v2.router:APIRouter.factory

[filter:healthcheck]
use = egg:oslo.middleware#healthcheck
backends = disable_by_file
disable_by_file_path = /etc/neutron/healthcheck_disable
