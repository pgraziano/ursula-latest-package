---
- name: create swift user
  user: name=swift comment=swift shell=/bin/false system=yes home=/nonexistent

# swiftops requires a shell and a home in order to build/distribute rings
- name: create swiftops user
  user: name=swiftops comment=swiftops shell=/bin/bash system=yes
        home=/home/swiftops

- name: create swiftops .ssh directory
  file: dest=/home/swiftops/.ssh state=directory owner=swiftops
        group=swiftops mode=0755

- name: drop a swiftops private key
  template: src=home/swiftops/.ssh/id_rsa dest=/home/swiftops/.ssh/id_rsa
            owner=swiftops group=swiftops mode=0600

- name: drop a swiftops public key
  template: src=home/swiftops/.ssh/id_rsa.pub
            dest=/home/swiftops/.ssh/id_rsa.pub owner=swiftops
            group=swiftops mode=0600

- name: setup swiftops authorized hosts
  file: src=/home/swiftops/.ssh/id_rsa.pub
        dest=/home/swiftops/.ssh/authorized_keys state=link

- name: setup swiftops sudoers
  template: src=etc/sudoers.d/swiftops dest=/etc/sudoers.d/swiftops
            owner=root group=root mode=0440

- name: set swifttool venv on ubuntu
  set_fact:
    swifttool_venv: "{{ swift.venv_dir }}"
  when: openstack_distro_type != 'osp'

- name: get swifttool repo
  git: |
    repo=https://github.com/blueboxgroup/swifttool.git
    dest=/opt/stack/{{ swift.swifttool_dir  }}
    update={{ openstack.git_update }}
  notify:
    - pip install swifttool
  when: swift.swifttool_method == 'git'

- name: install swifttool pip
  pip:
    name: swifttool
    version: "{{ swift.swifttool_version }}"
    extra_args: "-i {{ openstack.pypi_mirror }} --extra-index-url {{ swift.swifttool_pypi_mirror | default(omit) }}"
    virtualenv: "{{ swifttool_venv|default(omit) }}"
  register: result
  until: result|success
  retries: 3
  delay: 10
  notify:
    - update ca-certs
    - pip clean swifttool outside venv
    - setup swifttool alternatives
  when: swift.swifttool_method == 'pip'

- name: create swift configuration diectory
  file: dest=/etc/swift state=directory owner=swiftops
        group=swiftops mode=0755

- name: configure swift
  template: src=etc/swift/swift.conf dest=/etc/swift/swift.conf
            owner=swift group=swift mode=0640

- name: create swift cache directory
  file: dest=/var/cache/swift state=directory owner=swift
        group=swift mode=0755

- name: create swift node directory
  file: dest=/srv/node state=directory owner=root group=root mode=0755

- name: install rsync
  apt: pkg=rsync
  register: result
  until: result|succeeded
  retries: 5
  when: ursula_os == 'ubuntu'

- name: install rsync
  yum: pkg=rsync
  register: result
  until: result|succeeded
  retries: 5
  when: ursula_os == 'rhel'

- template: src=etc/rsyncd.conf dest=/etc/rsyncd.conf owner=root
            group=root mode=0644
  notify: restart rsync

- lineinfile: dest=/etc/default/rsync regexp=^RSYNC_ENABLE
              line=RSYNC_ENABLE=true
  notify: restart rsync
  when: ursula_os == 'ubuntu'

- name: configure dispersion tools
  template: src=etc/swift/dispersion.conf dest=/etc/swift/dispersion.conf
            owner=swift group=swift mode=0640

- include: monitoring.yml
  tags:
    - monitoring
    - common
  when: monitoring.enabled|default('True')|bool

- include: logging.yml
  tags:
    - logrotate
    - logging

- name: include swift warning in message of the day
  template: src=etc/update-motd.d/99-swift-motd dest=/etc/update-motd.d/99-swift-motd mode=0755
  when: ursula_os == 'ubuntu'

- name: include swift warning in message of the day
  lineinfile:
    destfile: /etc/motd
    line: WARNING Swift node -- do not replace disks without consulting Swift specific procedures
  when: ursula_os == 'rhel'

- name: system tuning recommendations for swift per deployment guide
  sysctl: name={{ item.key }} value={{ item.value }}
  with_dict: "{{ swift.tuning }}"

- name: disable swift directory parsing by updatedb
  command: updatedb -e /srv/node
  when: ursula_os == 'ubuntu'

- name: ensure mlocate is not installed
  yum:
    pkg: mlocate
    state: absent
  when: ursula_os == 'rhel'
