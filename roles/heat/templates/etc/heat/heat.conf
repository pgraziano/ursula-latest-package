# {{ ansible_managed }}

[DEFAULT]
debug = {{ heat.logging.debug }}
verbose = {{ heat.logging.verbose }}
{% if heat.auditing.enabled|bool and heat.auditing.logging|bool %}
# Store pyCADF audit events in log #
notification_driver = log
{% endif %}

log_dir = /var/log/heat
use_stderr = false

convergence_engine = {{ heat.convergence_engine }}

deferred_auth_method=trusts
trusts_delegated_roles=heat_stack_owner

stack_domain_admin=heat_domain_admin
stack_domain_admin_password={{ secrets.stack_domain_admin_password }}
stack_user_domain_name=heat
max_nested_stack_depth=16

heat_metadata_server_url={{ endpoints.heat_cfn.url.internal }}
heat_waitcondition_server_url={{ endpoints.heat_cfn.url.internal }}/{{ endpoints.heat_cfn.version }}/waitcondition
instance_connection_is_secure=1
region_name_for_services=RegionOne

rpc_thread_pool_size=64
{% if ceilometer.enabled|default('False')|bool -%}
notification_driver = heat.openstack.common.notifier.rpc_notifier
{% else -%}
notification_driver = noop
{% endif -%}
rpc_response_timeout=60

default_software_config_transport=POLL_SERVER_HEAT
default_deployment_signal_transport=HEAT_SIGNAL

{% if heat.plugin_dirs|length > 0 -%}
plugin_dirs = {{ heat.plugin_dirs|join(', ') }}
{% endif %}

num_engine_workers = {{ heat.engine_workers }}

[database]
connection=mysql+pymysql://heat:{{ secrets.db_password }}@{{ endpoints.db }}/heat?charset=utf8
max_overflow=1000

[keystone_authtoken]
identity_uri = {{ endpoints.identity_uri }}
auth_uri = {{ endpoints.keystone.url.internal }}/{{ endpoints.keystonev3.version }}
admin_tenant_name = service
admin_user = heat
admin_password = {{ secrets.service_password }}
cafile = {{ heat.cafile }}
signing_dir = /var/cache/heat
delay_auth_decision=true

[heat_api]
workers = {{ heat.api_workers }}
bind_host = 0.0.0.0
bind_port = {{ endpoints.heat.port.backend_api }}
ca_file = {{ heat.cafile }}

[heat_api_cfn]
bind_host = 0.0.0.0
bind_port = {{ endpoints.heat_cfn.port.backend_api }}
ca_file = {{ heat.cafile }}

[clients]
ca_file = {{ heat.cafile }}

[ec2authtoken]
ca_file = {{ heat.cafile }}

[oslo_messaging_rabbit]
{% macro rabbitmq_hosts() -%}
{% for host in groups['controller'] -%}
   {% if loop.last -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ rabbitmq.port }}
   {%- else -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ rabbitmq.port }},
   {%- endif -%}
{% endfor -%}
{% endmacro -%}

heartbeat_timeout_threshold = {{ heat.heartbeat_timeout_threshold }}
{% if rabbitmq.cluster -%}
rabbit_hosts = {{ rabbitmq_hosts() }}
{% else -%}
rabbit_host = {{ endpoints.rabbit }}
rabbit_port = 5672
{% endif -%}
rabbit_userid = {{ rabbitmq.user }}
rabbit_password = {{ secrets.rabbit_password }}

[oslo_middleware]
enable_proxy_headers_parsing = True

[volumes]
{% if cinder.enabled -%}
backup_enabled = True
{% else -%}
backup_enabled = False
{% endif -%}
