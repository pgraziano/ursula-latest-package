{% macro memcached_hosts() -%}
{% for host in groups['controller'] -%}
   {%- if loop.last -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ memcached.port }}
   {%- else -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ memcached.port }}, {% endif -%}
{% endfor -%}
{% endmacro -%}
<SPConfig xmlns="urn:mace:shibboleth:2.0:native:sp:config"
    xmlns:conf="urn:mace:shibboleth:2.0:native:sp:config"
    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
    xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
    xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
    clockSkew="180">

    <OutOfProcess logger="shibd.logger">
        <Extensions>
            <Library path="memcache-store.so" fatal="true"/>
        </Extensions>
    </OutOfProcess>
    <StorageService type="MEMCACHE" id="mc" prefix="SHIBD_SERVICE" buildMap="1">
       <Hosts>
           {{ memcached_hosts() }}
       </Hosts>
    </StorageService>
    <SessionCache type="StorageService" StorageService="mc" cacheAssertions="false"
                  cacheTimeout="3600" inprocTimeout="900" cleanupInterval="900"/>
    <ReplayCache StorageService="mc"/>
    <ArtifactMap StorageService="mc" artifactTTL="180"/>

    <ApplicationDefaults entityID="{{ keystone.federation.sp.saml.sp_id }}"
      {%- if keystone.federation.sp.saml.auth_signing %} signing="true"{%- endif-%}>
        <Sessions lifetime="28800" timeout="3600" relayState="ss:mc"
                  checkAddress="false" handlerSSL="false" cookieProps="http">
            <SSO entityID="{{ keystone.federation.sp.saml.providers[0].saml_entity_id }}" ECP="true">
              SAML2 SAML1
            </SSO>

            <Logout>SAML2 Local</Logout>

            <Handler type="MetadataGenerator" Location="/Metadata" signing="false"/>
            <Handler type="Status" Location="/Status" acl="127.0.0.1 ::1"/>
            <Handler type="Session" Location="/Session" showAttributeValues="true"/>
            <Handler type="DiscoveryFeed" Location="/DiscoFeed"/>
        </Sessions>

        <Errors supportContact="{{ keystone.federation.sp.saml.support_contact }}"
            helpLocation="/about.html"
            styleSheet="/shibboleth-sp/main.css"/>

{% if keystone.federation.sp.saml.providers[0].metadata_provider_type|default('url') == 'file' %}
        <MetadataProvider type="XML" path="{{keystone.federation.sp.saml.providers[0].metadata_file_path}}" />
{% endif %}
{% if keystone.federation.sp.saml.providers[0].metadata_provider_type|default('url') == 'url' %}
        <MetadataProvider type="XML" uri="{{ keystone.federation.sp.saml.providers[0].idp_metadata_url }}"
          backingFilePath="idp-metadata-provider-backup.xml"
          {% if keystone.federation.sp.saml.providers[0].idp_metadata_min_refresh_delay is defined %}
          minRefreshDelay="{{ keystone.federation.sp.saml.providers[0].idp_metadata_min_refresh_delay }}"
          {% endif %}
          {% if keystone.federation.sp.saml.providers[0].idp_metadata_max_refresh_delay is defined %}
          maxRefreshDelay="{{ keystone.federation.sp.saml.providers[0].idp_metadata_max_refresh_delay }}"
          {%endif %}
          {% if keystone.federation.sp.saml.providers[0].idp_metadata_min_refresh_delay is defined %}
          refreshDelayFactor="{{ keystone.federation.sp.saml.providers[0].idp_metadata_factor_refresh_delay }}"
          {% endif %}>
          {% if keystone.federation.sp.saml.providers[0].verify_idp_cert|default(True)|bool -%}
          <TransportOption provider="CURL" option="64">1</TransportOption>
          <TransportOption provider="CURL" option="81">2</TransportOption>
          <TransportOption provider="CURL" option="10065">/etc/ssl/certs/ca-certificates.crt</TransportOption>
          {% endif -%}
        </MetadataProvider>
{% endif %}
        <AttributeExtractor type="XML" validate="true" reloadChanges="false" path="attribute-map.xml"/>
        <AttributeResolver type="Query" subjectMatch="true"/>
        <AttributeFilter type="XML" validate="true" path="attribute-policy.xml"/>
        <CredentialResolver type="File" key="sp-key.pem" certificate="sp-cert.pem"/>
    </ApplicationDefaults>
    <SecurityPolicyProvider type="XML" validate="true" path="security-policy.xml"/>
    <ProtocolProvider type="XML" validate="true" reloadChanges="false" path="protocols.xml"/>
</SPConfig>
