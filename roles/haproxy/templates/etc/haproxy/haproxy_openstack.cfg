# Legend: name, clear_port, enc_port, prefer_primary_backend, health_check, balance
{% set haproxy_services = [
    [ 'horizon', 8080, 443, false, 'httpchk /', 'source' ],
    [
      'keystone',
      endpoints.keystone.port.backend_api,
      endpoints.keystone.port.haproxy_api,
      endpoints.keystone.haproxy.prefer_primary_backend,
      endpoints.keystone.haproxy.health_check,
      endpoints.keystone.haproxy.balance
    ],
    [
      'keystone-admin',
      endpoints.keystone_admin.port.backend_api,
      endpoints.keystone_admin.port.haproxy_api,
      endpoints.keystone_admin.haproxy.prefer_primary_backend,
      endpoints.keystone_admin.haproxy.health_check,
      endpoints.keystone_admin.haproxy.balance
    ],
    [
      'keystone_legacy',
      endpoints.keystone_legacy.port.backend_api,
      endpoints.keystone_legacy.port.haproxy_api,
      endpoints.keystone_legacy.haproxy.prefer_primary_backend,
      endpoints.keystone_legacy.haproxy.health_check,
      endpoints.keystone_legacy.haproxy.balance
    ],
    [
      'nova',
      endpoints.nova.port.backend_api,
      endpoints.nova.port.haproxy_api,
      endpoints.nova.haproxy.prefer_primary_backend,
      endpoints.nova.haproxy.health_check,
      endpoints.nova.haproxy.balance
    ],
    [
      'placement',
      endpoints.placement.port.backend_api,
      endpoints.placement.port.haproxy_api,
      endpoints.placement.haproxy.prefer_primary_backend,
      endpoints.placement.haproxy.health_check,
      endpoints.placement.haproxy.balance
    ],
    [
      'novnc',
      endpoints.novnc.port.backend_api,
      endpoints.novnc.port.haproxy_api,
      endpoints.novnc.haproxy.prefer_primary_backend,
      endpoints.novnc.haproxy.health_check,
      endpoints.novnc.haproxy.balance
    ],
    [
      'glance',
      endpoints.glance.port.backend_api,
      endpoints.glance.port.haproxy_api,
      endpoints.glance.haproxy.prefer_primary_backend,
      endpoints.glance.haproxy.health_check,
      endpoints.glance.haproxy.balance
    ],
    [
      'neutron',
      endpoints.neutron.port.backend_api,
      endpoints.neutron.port.haproxy_api,
      endpoints.neutron.haproxy.prefer_primary_backend,
      endpoints.neutron.haproxy.health_check,
      endpoints.neutron.haproxy.balance
    ]
  ]
-%}
{% if cinder.enabled|default('True')|bool -%}
{% set _ = haproxy_services.append(['cinder',
                                    endpoints.cinder.port.backend_api,
                                    endpoints.cinder.port.haproxy_api,
                                    endpoints.cinder.haproxy.prefer_primary_backend,
                                    endpoints.cinder.haproxy.health_check,
                                    endpoints.cinder.haproxy.balance ]) %}
{% endif -%}
{% if ceilometer.enabled|default('False')|bool -%}
    {% set _ = haproxy_services.append(['ceilometer',
                                        endpoints.ceilometer.port.backend_api,
                                        endpoints.ceilometer.port.haproxy_api,
                                        endpoints.ceilometer.haproxy.prefer_primary_backend,
                                        endpoints.ceilometer.haproxy.health_check,
                                        endpoints.ceilometer.haproxy.balance ]) %}
{% endif -%}
{% if magnum.enabled|default('False')|bool -%}
    {% set _ = haproxy_services.append(['magnum',
                                        endpoints.magnum.port.backend_api,
                                        endpoints.magnum.port.haproxy_api,
                                        endpoints.magnum.haproxy.prefer_primary_backend,
                                        endpoints.magnum.haproxy.health_check,
                                        endpoints.magnum.haproxy.balance]) %}
{% endif -%}
{% if heat.enabled -%}
    {% set _ = haproxy_services.append(['heat',
                                        endpoints.heat.port.backend_api,
                                        endpoints.heat.port.haproxy_api,
                                        endpoints.heat.haproxy.prefer_primary_backend,
                                        endpoints.heat.haproxy.health_check,
                                        endpoints.heat.haproxy.balance ]) %}
    {% set _ = haproxy_services.append(['heat-cfn',
                                        endpoints.heat_cfn.port.backend_api,
                                        endpoints.heat_cfn.port.haproxy_api,
                                        endpoints.heat_cfn.haproxy.prefer_primary_backend,
                                        endpoints.heat_cfn.haproxy.health_check,
                                        endpoints.heat_cfn.haproxy.balance ]) %}
{% endif -%}
{% if ironic.enabled -%}
    {% set _ = haproxy_services.append(['ironic',
                                        endpoints.ironic.port.backend_api,
                                        endpoints.ironic.port.haproxy_api,
                                        endpoints.ironic.haproxy.prefer_primary_backend,
                                        endpoints.ironic.haproxy.health_check,
                                        endpoints.ironic.haproxy.balance ]) %}
{% endif -%}
{% if ceilometer.enabled|default('False')|bool -%}
    {% set _ = haproxy_services.append(['aodh',
                                        endpoints.aodh.port.backend_api,
                                        endpoints.aodh.port.haproxy_api,
                                        endpoints.aodh.haproxy.prefer_primary_backend,
                                        endpoints.aodh.haproxy.health_check,
                                        endpoints.aodh.haproxy.balance ]) %}
{% endif -%}
{% if barbican.enabled|default('True')|bool -%}
{% set _ = haproxy_services.append(['barbican',
                                    endpoints.barbican.port.backend_api,
                                    endpoints.barbican.port.haproxy_api,
                                    endpoints.barbican.haproxy.prefer_primary_backend,
                                    endpoints.barbican.haproxy.health_check,
                                    endpoints.barbican.haproxy.balance ]) %}
{% endif -%}

global
  log /dev/log local0
  maxconn {{ haproxy.global.maxconn }}
  user haproxy
  group haproxy
  daemon
  pidfile /var/run/haproxy/haproxy.pid
  tune.bufsize {{ haproxy.global.bufsize }}
  stats socket /var/run/haproxy/stats.sock mode 770 group {{ haproxy.stats_group }}

defaults
  log global
  mode http
  option httplog
  option dontlognull
  option redispatch
  option forwardfor
  option httpclose # needed for empty reponse body 204's
  timeout client {{ haproxy.defaults.timeout_client }}
  timeout server {{ haproxy.defaults.timeout_server }}
  timeout connect {{ haproxy.defaults.timeout_connect }}
  timeout check {{ haproxy.defaults.timeout_check }}
  timeout http-keep-alive {{ haproxy.defaults.timeout_http_keep_alive }}
  timeout http-request {{ haproxy.defaults.timeout_http_request }}

  stats enable
  stats refresh {{ haproxy.defaults.stats_refresh }}
  stats uri /haproxy_stats
  stats auth admin:{{ secrets.admin_password }}

{% for name, clear_port, enc_port, prefer_primary_backend, health_check, balance in haproxy_services -%}
frontend {{ name }}
  # Require TLS with AES
  bind :::{{ enc_port }} ssl crt /etc/haproxy/openstack.pem no-sslv3 ciphers AES128-SHA:AES256-SHA
  default_backend {{ name }}
  reqadd X-Forwarded-Proto:\ https
  {% if name=="keystone" -%}
  reqadd X-Forwarded-Port:\ 5000
  {% endif %}

  {% if name == "horizon" -%}
  rspadd Strict-Transport-Security:\ max-age=31536000;\ includeSubDomains
  rspadd X-Content-Type-Options:\ nosniff
  rspadd X-XSS-Protection:\ 1
  bind :::80
  redirect scheme https if !{ ssl_fc }
  {% endif -%}

backend {{ name }}

  {% if name == "magnum" -%}
  # option {{ health_check }}
  {% else -%}
  option {{ health_check }}
  {% endif -%}

  balance {{ balance }}
  {% for host in groups['controller'] -%}

  {% if not prefer_primary_backend or hostvars[host][primary_interface]['ipv4']['address'] == primary_ip -%}
    {% if  name == "keystone" -%}
    cookie {{ endpoints.keystone.haproxy.oidc_cookie }}
    server {{ host }} {{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ clear_port }} check maxconn 40 cookie {{ host }} inter {{ haproxy.defaults.check_interval }}
    {% else -%}
    server {{ host }} {{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ clear_port }} check maxconn 40 inter {{ haproxy.defaults.check_interval }}
    {% endif -%}
  {% else -%}
    server {{ host }} {{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ clear_port }} backup check maxconn 40 inter {{ haproxy.defaults.check_interval }}
  {% endif -%}
  {% endfor %}

{% endfor %}

# Block for percona. Lifted from
# https://www.percona.com/doc/percona-xtradb-cluster/5.6/howtos/haproxy.html
# and
# https://www.percona.com/doc/percona-xtradb-cluster/5.6/howtos/virt_sandbox.html
# Mark all but first node as backup, so writes go to a single host.
#
# Currently does not protect against a server that is JOINING or DISCONNECTED
# that will require setting up a http service described in above URLs, but that
# is beyond the MVP. FIXME
listen mysql-cluster
  bind :::3307
  mode tcp
  maxconn {{ haproxy.mysql.maxconn }}
  retries {{ haproxy.mysql.retries }}
  option tcplog
  option tcpka
  timeout connect {{ haproxy.mysql.timeout_connect }}
  timeout client {{ haproxy.mysql.timeout_client }}
  timeout server {{ haproxy.mysql.timeout_server }}
  balance roundrobin
  option mysql-check user haproxy

{% for host in groups['db'] %}
{% if loop.first %}
  server {{ host }} {{ hostvars[host][primary_interface]['ipv4']['address'] }}:3306 check
{% else %}
  server {{ host }} {{ hostvars[host][primary_interface]['ipv4']['address'] }}:3306 check backup
{% endif %}
{% endfor %}
